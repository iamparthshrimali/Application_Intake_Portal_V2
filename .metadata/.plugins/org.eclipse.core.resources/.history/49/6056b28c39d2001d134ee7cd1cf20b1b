package com.example.backend.controller;

import org.bson.BsonBinarySubType;
import org.bson.types.Binary;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.InputStreamResource;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.BasicQuery;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.example.backend.model.Customer;
import com.example.backend.model.CustomerForApprovement;
import com.example.backend.model.UserModel;
import com.example.backend.repo.CustomerForApprovementRepo;
import com.example.backend.repo.CustomerRepo;
import com.example.backend.repo.UserRepo;

import ch.qos.logback.core.model.Model;

import org.springframework.http.MediaType;
import java.io.ByteArrayInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;

import java.util.*;

@CrossOrigin(origins = "http://localhost:3000")
@RestController
public class UserController {

	@Autowired
	UserRepo ur;
	@Autowired
	private CustomerForApprovementRepo custForApprovementRepo;

	@Autowired
	UserModel user;

	@Autowired
	CustomerRepo custRepo;

	@Autowired
	CustomerForApprovement customerForApprovement;
	
	@Autowired
	CustomerForApprovementRepo customerForApprovementRepo;

	@GetMapping("/")
	public String home() {
		return "hello app";
	}

	@PostMapping("/register")
	public UserModel register(@RequestParam MultipartFile pdf, String role, String username, String password,
			String email) throws IOException {

		
		user.setUsername(username);
		user.setEmail(email);
		user.setRole(role);
		user.setPassword(password);
		ur.save(user);
		return user;
	}

	@PostMapping("/login")
	public String login(@RequestBody UserModel user) {

		if (ur.findByUsernameAndPassword(user.getUsername(), user.getPassword()).size() > 0) {
			return "User Found";

		}

		return "User Not Found";
	}

	@GetMapping("/getuser")
	public List<UserModel> get() {

		return ur.findAll();

	}

	@RequestMapping("/retrieveFile")
	public ResponseEntity<InputStreamResource> downloadFile(@RequestParam String username) throws IOException {
		CustomerForApprovement c = custForApprovementRepo.findByEmail(username).get(0);
		System.out.println(c);
		Binary binary = null;

		binary = c.getPdf();

		InputStream inputStream = new ByteArrayInputStream(binary.getData());

		HttpHeaders headers = new HttpHeaders();
		headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=file.pdf");
		headers.add(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_PDF_VALUE);

		InputStreamResource inputStreamResource = new InputStreamResource(inputStream);
		return ResponseEntity.ok().headers(headers).body(inputStreamResource);
	}

	@RequestMapping("/validateCustomer")
	public Map<String, String> validateCustomer(@RequestBody Map<String, Object> requestParams) {
		HashMap<String, String> map = new HashMap<>();

		String email = (String) requestParams.get("email");
		String fname = (String) requestParams.get("fname");
		String lname = (String) requestParams.get("lname");
		String city = (String) requestParams.get("city");

		String state = (String) requestParams.get("state");
	
		
		if (custRepo.findByEmail(email).size() > 0) {
			Customer customer = custRepo.findByEmail(email).get(0);
			Boolean validFname = customer.getFname().equalsIgnoreCase(fname.trim());
			Boolean validLname = customer.getLname().equalsIgnoreCase(lname.trim());
			Boolean validCity = customer.getCity().equalsIgnoreCase(city.trim());
			Boolean validState = customer.getState().equals(state.trim());
			map.put("fname", Boolean.toString(validFname));
			map.put("lname", Boolean.toString(validLname));
			map.put("city", Boolean.toString(validCity));
			map.put("state", Boolean.toString(validState));
			map.put("result", "true");
		} else
			map.put("result", "Customer not found");
		return map;

	}
	
	@RequestMapping("/registerCustomer")
	public Map<String, String> registerCustomer(@RequestBody Map<String, Object> requestParams)
	{
		HashMap<String, String> map = new HashMap<>();

		String email = (String) requestParams.get("email");
		String fname = (String) requestParams.get("fname");
		String lname = (String) requestParams.get("lname");
		String city = (String) requestParams.get("city");
		String address = (String) requestParams.get("address");
		String state = (String) requestParams.get("state");
		String pdf = (String) requestParams.get("pdf");
		pdf=pdf.substring(28);
		
		byte[] binaryData = Base64.getDecoder().decode(pdf);
		Binary binary = new Binary(binaryData);
		customerForApprovement.setFname(fname);
		customerForApprovement.setLname(lname);
		customerForApprovement.setCity(city);
		customerForApprovement.setEmail(email);
		customerForApprovement.setAddress(address);
		customerForApprovement.setState(state);
		customerForApprovement.setPdf(binary);
		custForApprovementRepo.save(customerForApprovement);
		map.put("result", "submitted");
		return map;
	}

}
