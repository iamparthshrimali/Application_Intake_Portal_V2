package com.example.backend.controller;

import org.bson.BsonBinarySubType;
import org.bson.types.Binary;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.BasicQuery;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.example.backend.model.UserModel;
import com.example.backend.repo.UserRepo;
import java.util.Base64;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.*;

@CrossOrigin(origins = "http://localhost:3000")
@RestController
public class UserController {

	@Autowired
	UserRepo ur;

	@Autowired
	UserModel user;

	@GetMapping("/")
	public String home() {
		return "hello app";
	}

	@PostMapping("/register")
	public UserModel register(@RequestParam MultipartFile pdf, String role,String username, String password, String email) throws IOException {

		user.setFile(new Binary(BsonBinarySubType.BINARY, pdf.getBytes()));
        user.setUsername(username);
        user.setEmail(email);
        user.setRole(role);
        user.setPassword(password);
		ur.save(user);
		return user;
	}

	@PostMapping("/login")
	public String login(@RequestBody UserModel user) {

		if (ur.findByUsernameAndPassword(user.getUsername(), user.getPassword()).size() > 0) {
			return "User Found";

		}

		return "User Not Found";
	}

	@GetMapping("/getuser")
	public List<UserModel> get() {

		return ur.findAll();

	}
	
	
	@RequestMapping("/retrieve")
	public DataOutputStream retrieveFile(@RequestParam("email") String email) throws IOException{
	   Optional<UserModel> model= ur.findById(email);
	 
	   if(model.isPresent())
	   {
		   UserModel u=model.get();
		
		   byte[] bytes = Base64.getDecoder().decode(u.getFile().toString());
		   DataOutputStream os = new DataOutputStream(new FileOutputStream("output.pdf"));
		   os.write(bytes);
		   return os;
	   }
	   else {
		   return null;
	   }
	}
	
	
	
}
